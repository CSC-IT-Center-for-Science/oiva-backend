/*
 * This file is generated by jOOQ.
 */
package fi.minedu.oiva.backend.model.jooq.tables;


import com.fasterxml.jackson.databind.JsonNode;

import fi.minedu.oiva.backend.model.jooq.DefaultSchema;
import fi.minedu.oiva.backend.model.jooq.Indexes;
import fi.minedu.oiva.backend.model.jooq.Keys;
import fi.minedu.oiva.backend.model.jooq.PostgresJSONJacksonBinding;
import fi.minedu.oiva.backend.model.jooq.tables.records.LiiteRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Liite extends TableImpl<LiiteRecord> {

    private static final long serialVersionUID = 528478814;

    /**
     * The reference instance of <code>liite</code>
     */
    public static final Liite LIITE = new Liite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LiiteRecord> getRecordType() {
        return LiiteRecord.class;
    }

    /**
     * The column <code>liite.id</code>.
     */
    public final TableField<LiiteRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('liite_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>liite.nimi</code>.
     */
    public final TableField<LiiteRecord, String> NIMI = createField(DSL.name("nimi"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>liite.polku</code>.
     */
    public final TableField<LiiteRecord, String> POLKU = createField(DSL.name("polku"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>liite.tila</code>.
     */
    public final TableField<LiiteRecord, Boolean> TILA = createField(DSL.name("tila"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>liite.luoja</code>.
     */
    public final TableField<LiiteRecord, String> LUOJA = createField(DSL.name("luoja"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>liite.luontipvm</code>.
     */
    public final TableField<LiiteRecord, Timestamp> LUONTIPVM = createField(DSL.name("luontipvm"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>liite.paivittaja</code>.
     */
    public final TableField<LiiteRecord, String> PAIVITTAJA = createField(DSL.name("paivittaja"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>liite.paivityspvm</code>.
     */
    public final TableField<LiiteRecord, Timestamp> PAIVITYSPVM = createField(DSL.name("paivityspvm"), org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>liite.koko</code>.
     */
    public final TableField<LiiteRecord, Long> KOKO = createField(DSL.name("koko"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>liite.meta</code>.
     */
    public final TableField<LiiteRecord, JsonNode> META = createField(DSL.name("meta"), org.jooq.impl.SQLDataType.JSONB, this, "", new PostgresJSONJacksonBinding());

    /**
     * The column <code>liite.tyyppi</code>.
     */
    public final TableField<LiiteRecord, String> TYYPPI = createField(DSL.name("tyyppi"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>liite.kieli</code>.
     */
    public final TableField<LiiteRecord, String> KIELI = createField(DSL.name("kieli"), org.jooq.impl.SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>liite.uuid</code>.
     */
    public final TableField<LiiteRecord, UUID> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false).defaultValue(org.jooq.impl.DSL.field("uuid_generate_v1()", org.jooq.impl.SQLDataType.UUID)), this, "");

    /**
     * The column <code>liite.salainen</code>.
     */
    public final TableField<LiiteRecord, Boolean> SALAINEN = createField(DSL.name("salainen"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>liite.paikka</code>.
     */
    public final TableField<LiiteRecord, String> PAIKKA = createField(DSL.name("paikka"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>liite.tiedosto_id</code>.
     */
    public final TableField<LiiteRecord, String> TIEDOSTO_ID = createField(DSL.name("tiedosto_id"), org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>liite</code> table reference
     */
    public Liite() {
        this(DSL.name("liite"), null);
    }

    /**
     * Create an aliased <code>liite</code> table reference
     */
    public Liite(String alias) {
        this(DSL.name(alias), LIITE);
    }

    /**
     * Create an aliased <code>liite</code> table reference
     */
    public Liite(Name alias) {
        this(alias, LIITE);
    }

    private Liite(Name alias, Table<LiiteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Liite(Name alias, Table<LiiteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Liite(Table<O> child, ForeignKey<O, LiiteRecord> key) {
        super(child, key, LIITE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LIITE_PKEY, Indexes.LIITE_UUID_KEY);
    }

    @Override
    public Identity<LiiteRecord, Long> getIdentity() {
        return Keys.IDENTITY_LIITE;
    }

    @Override
    public UniqueKey<LiiteRecord> getPrimaryKey() {
        return Keys.LIITE_PKEY;
    }

    @Override
    public List<UniqueKey<LiiteRecord>> getKeys() {
        return Arrays.<UniqueKey<LiiteRecord>>asList(Keys.LIITE_PKEY, Keys.LIITE_UUID_KEY);
    }

    @Override
    public Liite as(String alias) {
        return new Liite(DSL.name(alias), this);
    }

    @Override
    public Liite as(Name alias) {
        return new Liite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Liite rename(String name) {
        return new Liite(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Liite rename(Name name) {
        return new Liite(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, String, String, Boolean, String, Timestamp, String, Timestamp, Long, JsonNode, String, String, UUID, Boolean, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
